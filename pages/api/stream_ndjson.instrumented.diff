--- a/pages/api/stream_ndjson.ts
+++ b/pages/api/stream_ndjson.ts
@@
-import type { NextApiRequest, NextApiResponse } from 'next';
+import type { NextApiRequest, NextApiResponse } from 'next';
+import { sInfo, sError, sDebug } from '../../lib/debug/serverLog';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  // --- Instrumentation start ---
+  const reqId = Math.random().toString(36).slice(2, 8);
+  sInfo('stream', 'request:start', { ip: req.headers['x-forwarded-for'] || req.socket.remoteAddress, ua: req.headers['user-agent'], query: req.query }, reqId);
+  // --- Instrumentation end ---
+
   res.setHeader('Content-Type', 'application/x-ndjson; charset=utf-8');
   res.setHeader('Cache-Control', 'no-store');
 
-  function writeLine(obj: any){
-    res.write(JSON.stringify(obj) + '\n');
-  }
+  function writeLine(obj: any){
+    try {
+      sDebug('stream', 'send', obj, reqId);
+    } catch {}
+    res.write(JSON.stringify(obj) + '\n');
+  }
 
   try {
     // ... your existing game loop / streaming logic ...
     // Example:
     // writeLine({ type: 'log', message: 'Game started' });
   } catch (err: any) {
-    writeLine({ type: 'error', message: String(err?.message || err) });
+    writeLine({ type: 'error', message: String(err?.message || err) });
+    try { sError('stream', 'exception', { error: String(err?.stack || err) }, reqId); } catch {}
   } finally {
+    try { sInfo('stream', 'request:end', {}, reqId); } catch {}
     res.end();
   }
 }
