import { BotFunc, BotCtx, generateMoves } from '../doudizhu/engine';import { extractFirstJsonObject, nonEmptyReason } from './util';let _next=0;const sleep=(ms:number)=>new Promise(r=>setTimeout(r,ms));function parseRetryAfter(h:Headers,b:string){const ra=h.get('retry-after');if(ra){const n=Number(ra);if(!Number.isNaN(n)&&n>0)return n*1000;const t=Date.parse(ra);if(!Number.isNaN(t))return Math.max(0,t-Date.now());}const m=/after\s+(\d+(?:\.\d+)?)\s*seconds?/i.exec(b||'');if(m){const s=Number(m[1]);if(!Number.isNaN(s)&&s>=0)return Math.round(s*1000);}return 2000;}async function throttle(){const now=Date.now();const wait=_next-now;if(wait>0)await sleep(wait);_next=Date.now()+22000;}export const KimiBot=(o:{apiKey:string,model?:string,baseUrl?:string}):BotFunc=>async (ctx:BotCtx)=>{try{if(!o.apiKey)throw new Error('Missing Kimi API Key');await throttle();const r=await fetch((o.baseUrl||'https://api.moonshot.cn').replace(/\/$/, '')+'/v1/chat/completions',{method:'POST',headers:{'content-type':'application/json',authorization:`Bearer ${o.apiKey}`},body:JSON.stringify({model:o.model||'moonshot-v1-8k',messages:[{role:'system',content:'Only reply with a strict JSON object for the move.'},{role:'user',content:`你是斗地主出牌助手。必须只输出一个 JSON 对象：\n{ "move": "play|pass", "cards": ["A","A"], "reason": "简要理由" }\n\n手牌：${ctx.hands.join('')}\n需跟：${ctx.require?JSON.stringify(ctx.require):'null'}\n可过：${ctx.canPass?'true':'false'}\n策略：${ctx.policy}\n只能出完全合法的牌型；若必须跟牌则给出能压住的最优解。`}]})});let body=await r.text().catch(()=>'' ) as string;if(!r.ok){let last='HTTP '+r.status+' '+body[:200];if((r.status===429||(r.status>=500&&r.status<=599))){const w=parseRetryAfter(r.headers,body);await sleep(w);}throw new Error('HTTP '+r.status+' '+body[:200]);}let j:any={};try{j=JSON.parse(body)}catch{}const out=j?.choices?.[0]?.message?.content||'';const p:any=extractFirstJsonObject(out)||{};const m=p.move==='pass'?'pass':'play';const cds=Array.isArray(p.cards)?p.cards:[];const reason=nonEmptyReason(p.reason,'Kimi');return m==='pass'?{move:'pass',reason}:{move:'play',cards:cds,reason};}catch(e:any){const reason=`Kimi 调用失败：${e?.message||e}，已回退`;if(ctx.canPass)return{move:'pass',reason};const legal=generateMoves(ctx.hands,ctx.require,ctx.policy);return{move:'play',cards:(legal&&legal[0])||[ctx.hands[0]],reason};}}